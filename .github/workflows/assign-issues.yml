name: Assign Member to New Issues

on:
  issues:
    types: [opened]

jobs:
  assign-member:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch Member from Group
        uses: actions/github-script@v4
        id: assign-member
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            const group = "team-members";
            const repo = process.env.GITHUB_REPOSITORY;

            const members = await octokit.teams.listMembersInOrg({
              org: process.env.GITHUB_REPOSITORY_OWNER,
              team_slug: group,
            });

            const index = parseInt(process.env.GITHUB_RUN_NUMBER) % members.data.length;
            const member = members.data[index];
            console.log(`Assigned issue to: ${member.login}`);

            const assignees = [member.login];
            const issue_number = context.payload.issue.number;
            await octokit.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              assignees,
            });

            core.setOutput("member", member.login);

      # - name: Fetch Member from Group
      #   uses: actions/github-script@v4
      #   id: assign-member
      #   with:
      #     script: |
      #       const { Octokit } = require("@octokit/rest");
      #       const octokit = new Octokit({ auth: process.env.MY_GITHUB_TOKEN });

      #       const group = "gluestack-ui";
      #       const repo = gluestack-ui;

      #       const members = await octokit.teams.listMembersInOrg({
      #         org: gluestack,
      #         team_slug: group,
      #       });

      #       const ignore_members = '${{ inputs.ignore_members }}'.split(',');
      #       const filtered_members = members.data.filter(member => !ignore_members.includes(member.login));

      #       const index = parseInt(1) % filtered_members.length;
      #       const member = filtered_members[index];
      #       console.log(`Assigned issue to: ${member.login}`);

      #       const assignees = [member.login];
      #       const issue_number = context.payload.issue.number;
      #       await octokit.issues.addAssignees({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number,
      #         assignees,
      #       });

      #       core.setOutput("member", member.login);

      - name: Log Assigned Member
        run: echo "Assigned to ${{ steps.assign-member.outputs.member }}"

      - name: Commit Assignee to Issue
        run: |
          assignee="${{ steps.assign-member.outputs.member }}"
          echo "Assigning $assignee to issue ${GITHUB_EVENT.issue.number}"
          curl --request PATCH \
               --header "Authorization: Bearer ${{ secrets.MY_GITHUB_TOKEN }}" \
               --header "Accept: application/vnd.github.v3+json" \
               --url "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/issues/${GITHUB_EVENT.issue.number}" \
               --data "{\"assignees\":[\"$assignee\"]}"
